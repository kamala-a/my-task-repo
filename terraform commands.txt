terraform commands

1.  main.tf file
terraform {
  required_version = "~> 1.1"
  required_providers {
    aws = {
      version = "~>3.1"
    }
  }
}
provider "aws" {
   region = "us-east-1"
}
resource "aws_instance" "myec2" {
 
     ami = "ami-0c614dee691cbbf37"
     instance_type = "t2.micro"
        count = 2
     tags = {
        Name = "myterra ${count.index+1}"
     }
}

1. terraform init
2. terraform plan 
3. terraform apply
4. terraform fmt
5. terraform destroy

2. create sg, pvt/pub-key(.pem) and ec2 in single file & attach ti ec2  
nano main.tf 
terraform {
  required_version = "~> 1.1"
  required_providers {
    aws = {
      version = "~>3.1"
    }
  }
}
provider "aws" {
   region = "ap-south-1"
}
resource "aws_instance" "myec2" {
 
     ami = "ami-00bb6a80f01f03502"
     vpc_security_group_ids = [aws_security_group.mysg.id]
     instance_type = "t2.micro"
     tags = {
        Name = "myterra"
     }
}
resource "aws_security_group" "mysg" {
  name   = "mysg-1"
  vpc_id = "vpc-0ed0001bdda8ffe0d"
  egress {
    to_port   = 0
    from_port = 0
    protocol  = "-1"
  }
  ingress {
    to_port     = 22
    from_port   = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}
resource "aws_key_pair" "tf-key-pair" {
    key_name = "my-tf-key"
    public_key = tls_private_key.rsa.public_key_openssh
}
resource "tls_private_key" "rsa" {
    algorithm = "RSA"
    rsa_bits  = 4096
}
resource "local_file" "tf-key" {
   content  = tls_private_key.rsa.private_key_pem
   filename = "my-tf-key"
}


3. main.tf (with variables)
terraform {

  required_version = "~> 1.1"

  required_providers {

    aws = {

      version = "~>3.1"

    }

  }

}

variable "region_name" {

  type    = string

  default = "ap-south-1"

}

variable "my_ami" {

   type = string

   default = "ami-00bb6a80f01f03502"

}

variable "vpc_id" {

   type = string

   default = "vpc-0ed0001bdda8ffe0d"

}

variable "my_access_key" {

  type = string

}
variable "secret_key" {

  type = string

}

provider "aws" {

  region     = var.region_name

  access_key = var.my_access_key

  secret_key = var.secret_key

}

resource "aws_instance" "myec2" {
 
  ami                    = var.my_ami

  instance_type          = "t2.micro"

  vpc_security_group_ids = [aws_security_group.mysg.id]

  tags = {

    Name = "myinstance"

  }

  key_name = "mytf-key"

}

resource "aws_security_group" "mysg" {

  name   = "my-sg2"

  vpc_id = var.vpc_id
  egress {

    from_port = 0

    to_port   = 0

    protocol  = "-1"

  }

  ingress {

    cidr_blocks = ["0.0.0.0/0"]

    from_port   = 22

    protocol    = "tcp"

    to_port     = 22

  }

}

resource "aws_key_pair" "tf-key-pair" {

  key_name   = "mytf-key"

  public_key = tls_private_key.rsa.public_key_openssh

}

resource "tls_private_key" "rsa" {

  algorithm = "RSA"

  rsa_bits  = 4096

}

resource "local_file" "tf-key" {

  content  = tls_private_key.rsa.private_key_pem

  filename = "mytf-key"
}
 

5.  terraform.tfvars
my_access_key = "AKIAVYUUYWABJOSLZ6AGKV4H"

secret_key    = "OqkMAWOmCnDFUYTRo3bYUYIOJHK3kcUQJffsirJ6RGRT+sDklTFzy"

region_name = "us-east-1"

vpc_id = "vpc-0ed3c429e5882f1e0"

my_ami = "ami-0c614dee691cbbf37"


6.  main.tf (with output variables)
terraform {

  required_version = "~> 1.1"

  required_providers {

    aws = {

      version = "~>3.1"

    }

  }

}

variable "region_name" {

  type    = string

  default = "ap-south-1"

}

variable "my_ami" {

   type = string

   default = "ami-00bb6a80f01f03502"

}

variable "vpc_id" {

   type = string

   default = "vpc-0ed0001bdda8ffe0d"

}

variable "my_access_key" {

  type = string

}
variable "secret_key" {

  type = string

}

provider "aws" {

  region     = var.region_name

  access_key = var.my_access_key

  secret_key = var.secret_key

}

resource "aws_instance" "myec2" {
 
  ami                    = var.my_ami

  instance_type          = "t2.micro"

  vpc_security_group_ids = [aws_security_group.mysg.id]

  tags = {

    Name = "myinstance"

  }

  key_name = "mytf-key"

}

resource "aws_security_group" "mysg" {

  name   = "my-sg2"

  vpc_id = var.vpc_id
  egress {

    from_port = 0

    to_port   = 0

    protocol  = "-1"

  }

  ingress {

    cidr_blocks = ["0.0.0.0/0"]

    from_port   = 22

    protocol    = "tcp"

    to_port     = 22

  }

}

resource "aws_key_pair" "tf-key-pair" {

  key_name   = "mytf-key"

  public_key = tls_private_key.rsa.public_key_openssh

}

resource "tls_private_key" "rsa" {

  algorithm = "RSA"

  rsa_bits  = 4096

}

resource "local_file" "tf-key" {

  content  = tls_private_key.rsa.private_key_pem

  filename = "mytf-key"
}
output "state" {

   value= aws_instance.myec2.instance_state

}

output "instance_id" {

   value = aws_instance.myec2.id

}

output "public_ip" {

   value = aws_instance.myec2.public_ip

}


16. main.tf (with user_data)
terraform {

  required_version = "~> 1.1"

  required_providers {

    aws = {

      version = "~>3.1"

    }

  }

}

provider "aws" {

  region = var.my_region

  access_key = var.access_key
  secret_key = var.secret_key

}

resource "aws_instance" "myec2" {
 
  ami           = var.my_ami

  instance_type = var.ins_type

  vpc_security_group_ids = [aws_security_group.mysg.id]

  tags = {

    Name = "myinstance "

  }

  key_name = "mytf-key"
  user_data = <<-EOF

  #!/bin/bash

  yum update -y

  yum install nginx -y

  service nginx start

  echo "Hello from Terraform" > /usr/share/nginx/html/index.html

  EOF

}

resource "aws_security_group" "mysg" {

  name   = "my-sg1"

  vpc_id = var.vpc_id

  egress {

    from_port = 0

    to_port   = 0

    protocol  = "-1"
    cidr_blocks = ["0.0.0.0/0"]

  }

  ingress {
     cidr_blocks = ["0.0.0.0/0"]

    from_port   = 22

    protocol    = "tcp"

    to_port     = 22

  }
ingress {
     cidr_blocks = ["0.0.0.0/0"]

    from_port   = 80

    protocol    = "tcp"

    to_port     = 80

  }

}

resource "aws_key_pair" "tf-key-pair" {

    key_name = "mytf-key"

    public_key = tls_private_key.rsa.public_key_openssh

}

resource "tls_private_key" "rsa" {

    algorithm = "RSA"

    rsa_bits  = 4096

}

resource "local_file" "tf-key" {

   content  = tls_private_key.rsa.private_key_pem

  filename = "mytf-key"

}
 
variables.tf
variable "region_name" {

  type    = string

  default = "ap-south-1"

}

variable "ins_type" {
   default = t2.micro

   type = string

}

variable "my_ami" {

   type = string

   default = "ami-00bb6a80f01f03502"

}

variable "vpc_id" {

   type = string

   default = "vpc-0ed0001bdda8ffe0d"

}

variable "my_access_key" {

  type = string

}

variable "secret_key" {

  type = string

}
 

17.  variables.tf
variable "region_name" {

  type    = string

  default = "ap-south-1"

}

variable "ins_type" {
   default = t2.micro

   type = string

}

variable "my_ami" {

   type = string

   default = "ami-00bb6a80f01f03502"

}

variable "vpc_id" {

   type = string

   default = "vpc-0ed0001bdda8ffe0d"

}

variable "my_access_key" {

  type = string

}

variable "secret_key" {

  type = string

}
 

18. output.tf
output "state" {

   value= aws_instance.myec2.instance_state

}

output "instance_id" {

   value = aws_instance.myec2.id

}

output "public_ip" {

   value = aws_instance.myec2.public_ip

}


## 19 .main.tf (witnh remote-exec)

terraform {
required_version = "~> 1.1"
required_providers {
aws = {
 version = "~>3.1"
 }
}
}
provider "aws" {
region = var.my_region
 access_key = var.access_key
 secret_key = var.secret_key
}

resource "aws_instance" "myec2" {
 ami           = var.my_ami
instance_type = var.ins_type
vpc_security_group_ids = [aws_security_group.mysg.id]
tags = {
 Name = "myinstance "
}
key_name = "mytf-key
provisioner "remote-exec" {
  inline = [
    "sudo yum update -y",
   " sudo yum install nginx -y ",
   "sudo service nginx start",
   "sudo sh -c 'echo Hello > /usr/share/nginx/html/index.html'"
  ]
}
connection {
 type = "ssh"
 user = "ec2-user"
 host = self.public_ip
 private_key = tls_private_key.rsa.private_key_pem

}
}

resource "aws_security_group" "mysg" {
   name   = "my-sg1"
   vpc_id = var.vpc_id
  egress {
    from_port = 0
    to_port   = 0
    protocol  = "-1"
    cidr_blocks = ["0.0.0.0/0"]
 }

  ingress {
    cidr_blocks = ["0.0.0.0/0"]
    from_port   = 22
    protocol    = "tcp"
    to_port     = 22
 }
ingress {
     cidr_blocks = ["0.0.0.0/0"]
     from_port   = 80
     protocol    = "tcp"
     to_port     = 80
 }
}

resource "aws_key_pair" "tf-key-pair" {
   key_name = "mytf-key"
   public_key = tls_private_key.rsa.public_key_openssh
}

resource "tls_private_key" "rsa" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

resource "local_file" "tf-key" {
   content  = tls_private_key.rsa.private_key_pem
   filename = "mytf-key"
}

##20. main.tf (s3 import)
  
terraform {
   required_version = "~> 1.1"
   required_providers {
    aws = {
    version = "~>3.1"
  }
 }
}

provider "aws" {
 region = var.my_region
 access_key = var.access_key
 secret_key = var.secret_key
}

resource "aws_s3_bucket" "bucket" {
   bucket = "mytestbucket7225"
}
output "bucket-link" {
  value = aws_s3_bucket.bucket.bucket_domain_name
}

variables.tf (s3 import)
variable "my_region" {
 type    = string
default = "ap-south-1"
}
variable "access_key" {
  type = string
}

variable "secret_key" {
  type = string
}
 
 terraform.tfvars
access_key = " "
secret_key    = " "
my_region = "us-east-1"

terraform import aws_s3_bucket.bucket mytestbucket7225

##21. main.tf (workspace)

terraform {
  required_version = "~> 1.1"
  required_providers {
    aws = {
      version = "~>3.1"
    }
  }
}
provider "aws" {
  region = var.my_region
  access_key = var.access_key
  secret_key = var.secret_key
}
resource "aws_instance" "myec2" {
  ami           = var.my_ami
  instance_type = lookup(var.ins_type, terraform.workspace)
  tags = {
    Name = "myinstance "
  }
}
 
##variables.tf (workspace)

variable "my_region" {
  type    = string
  default = "ap-south-1"
}
variable "access_key" {
  type = string
}
variable "secret_key" {
  type = string
}
variable "my_ami" {
   type= string
   default = "ami-0c50b6f7dc3701ddd"
}
variable "ins_type" {
  type = map
  default = {
    default = "t2.micro"
    dev = "t2.nano"
    test = "t2.small"
    prod = "t2.medium"
  }
}

##terraform,tfvars
access_key = "  "
secret_key = "  "
 
##terraform init
  terraform workspace
  terraform workspace -h
  terraform workspace list
  terraform workspace show
  terraform workspace new dev
  terraform workspace list
  terraform workspace show
  terraform workspace new test
  terraform workspace new prod
  terraform workspace list
  terraform workspace show
  terraform workspace select default
  terraform workspace show
  terraform workspace list
  terraform plan
  terraform workspace select dev
  terraform plan
  terraform workspace select test
  terraform plan
  terraform workspace select prod
  terraform plan
  terraform workspace list
  terraform workspace delete dev

##23. main.tf (3-tier)
terraform {
  required_version = "~> 1.1"
  required_providers {
    aws = {
      version = "~>3.1"
    }
  }
}
provider "aws" {
  region     = var.region_name
  access_key = var.my_access_key
  secret_key = var.secret_key
}
resource "aws_vpc" "customvpc" {
  cidr_block       = "10.0.0.0/16"
  tags = {
    Name = "myvpc"
  }
}
resource "aws_internet_gateway" "myigw" {
  vpc_id = aws_vpc.customvpc.id
  tags = {
    Name = "myigw"
  }
}
resource "aws_subnet" "web-subnet" {
  vpc_id     = aws_vpc.customvpc.id
  cidr_block = "10.0.0.0/20"
  availability_zone = "us-east-1a"
  tags = {
    Name = "websubnet"
  }
}
resource "aws_subnet" "app-subnet" {
  vpc_id     = aws_vpc.customvpc.id
  cidr_block = "10.0.16.0/20"
  availability_zone = "us-east-1b"
  tags = {
    Name = "appsubnet"
  }
}
resource "aws_subnet" "db-subnet" {
  vpc_id     = aws_vpc.customvpc.id
  cidr_block = "10.0.32.0/24"
  availability_zone = "us-east-1c"
  tags = {
    Name = "dbsubnet "
  }
}
resource "aws_route_table" "public-rt" {
  vpc_id = aws_vpc.customvpc.id
 
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.myigw.id
  }
  tags = {
    Name = "public-RT"
  }
}
resource "aws_route_table" "pvt-rt" {
  vpc_id = aws_vpc.customvpc.id
 
  tags = {
    Name = "pvt-RT"
  }
}
resource "aws_route_table_association" "web-association" {
  subnet_id      = aws_subnet.web-subnet.id
  route_table_id = aws_route_table.public-rt.id
}
resource "aws_route_table_association" "app-association" {
  subnet_id      = aws_subnet.app-subnet.id
  route_table_id = aws_route_table.pvt-rt.id
}
resource "aws_route_table_association" "db-association" {
  subnet_id      = aws_subnet.db-subnet.id
  route_table_id = aws_route_table.pvt-rt.id
}
resource "aws_security_group" "my-websg" {
  name   = "my-websg"
  vpc_id = aws_vpc.customvpc.id
  egress {
    from_port = 0
    to_port   = 0
    protocol  = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    cidr_blocks = ["0.0.0.0/0"]
    from_port   = 22
    protocol    = "tcp"
    to_port     = 22
  }
  ingress {
    cidr_blocks = ["0.0.0.0/0"]
    from_port   = 80
    protocol    = "tcp"
    to_port     = 80
  }
}
resource "aws_security_group" "my-appsg" {
  name   = "my-appsg"
  vpc_id = aws_vpc.customvpc.id
  egress {
    from_port = 0
    to_port   = 0
    protocol  = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    cidr_blocks = ["10.0.0.0/16"]
    from_port   = 22
    protocol    = "tcp"
    to_port     = 22
  }
  ingress {
    cidr_blocks = ["10.0.0.0/20"]
    from_port   = 9000
    protocol    = "tcp"
    to_port     = 9000
  }
}
resource "aws_security_group" "my-dbsg" {
  name   = "my-dbsg"
  vpc_id = aws_vpc.customvpc.id
  egress {
    from_port = 0
    to_port   = 0
    protocol  = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    cidr_blocks = ["10.0.0.0/16"]
    from_port   = 22
    protocol    = "tcp"
    to_port     = 22
  }
  ingress {
    cidr_blocks = ["10.0.16.0/20"]
    from_port   = 3306
    protocol    = "tcp"
    to_port     = 3306
  }
}
resource "aws_instance" "web" {
  ami                    = var.my_ami
  instance_type          = var.ins_type
  vpc_security_group_ids = [aws_security_group.my-websg.id]
  subnet_id = aws_subnet.web-subnet.id
  associate_public_ip_address = true
  tags = {
    Name = "webserver"
  }
  key_name = "mytf-key1"
}
resource "aws_instance" "app" {
  subnet_id = aws_subnet.app-subnet.id
  ami                    = var.my_ami
  instance_type          = var.ins_type
  vpc_security_group_ids = [aws_security_group.my-appsg.id]
  tags = {
    Name = "appserver"
 }
  key_name = "mytf-key1"
}
resource "aws_db_instance" "my-rds" {
  allocated_storage    = 10
  engine               = "mysql"
  engine_version       = "8.0"
  instance_class       = "db.t3.micro"
  username             = "admin"
  password             = "Pass1234"
  vpc_security_group_ids = [aws_security_group.my-dbsg.id]
  db_subnet_group_name = aws_db_subnet_group.my-subnet-grp.name
  skip_final_snapshot  = true
}
resource "aws_db_subnet_group" "my-subnet-grp" {
  name       = "my-sub-grp"
  subnet_ids = [aws_subnet.app-subnet.id, aws_subnet.db-subnet.id]
 
  tags = {
    Name = "My DB subnet group"
  }
}
resource "aws_key_pair" "tf-key-pair" {
  key_name   = "mytf-key1"
  public_key = tls_private_key.rsa.public_key_openssh
}
resource "tls_private_key" "rsa" {
  algorithm = "RSA"
  rsa_bits  = 4096
}
resource "local_file" "tf-key" {
  content  = tls_private_key.rsa.private_key_pem
  filename = "mytf-key1"
}
 
 
##24. main.tf (for docker)
terraform {
  required_providers {
  docker = {
   source  = "kreuzwerker/docker"
   version = "3.0.2"

  }
 }
}
 
provider "docker" {
  host = "unix:///var/run/docker.sock"
}
 
# Pulls the image

resource "docker_image" "myimg" {
  name = "nginx:latest"
}
 
# Create a container
resource "docker_container" "my_cont" {
  image = docker_image.myimg.image_id
  name  = "mynginx"
}

to ru on terraform server

  mkdir docker_demo
  cd docker_demo/
  nano main.tf
  sudo apt update
  sudo apt install docker.io -y
  sudo service docker start
  terraform init
  sudo docker images
  sudo docker ps
  terraform plan
  sudo terraform plan
  sudo terraform apply
  sudo docker images
  sudo docker ps
  
24.main.tf (for docker to execute shellscript file)
 
terraform {
  required_providers {
   docker = {
      source  = "kreuzwerker/docker"
      version = "3.0.2"
  }
 }
}
 
provider "docker" {
  host = "unix:///var/run/docker.sock"
}
 
# Pulls the image

resource "docker_image" "myimg" {
  name = "nginx:latest"
}
 
# Create a container

resource "docker_container" "my_cont" {
  image = docker_image.myimg.image_id
  name  = "mynginx1"
}

resource "null_resource" "exec" {
  provisioner "local-exec" {
  command = "${path.module}/docker.sh"
  interpreter = ["/bin/bash"]
}
}
runon terraform server
  nano docker.sh  (wrie docker installation and start commands in it)
  chmod +x docker.sh
  nano main.tf
  sudo terraform plan
  sudo terraform apply
  sudo docker images
  sudo docker ps
  

##26. main.tf (on github)
 
terraform {
  required_version = "~> 1.1"
  required_providers {
    aws = {
    version = "~>3.1"
   }
  }
}

provider "aws" {

  region = var.my_region
  access_key = var.access_key
  secret_key = var.secret_key
}

resource "aws_instance" "myec2" {
   ami           = var.my_ami
   instance_type = "t2.micro"
   tags = {
   Name = "myinstance "
}
}

variable "my_region" {
   type = string
   default = "ap-south-1"
}
variable "access_key" { }
variable "secret_key" { }
variable "my_ami" {
    type = string
   default = "ami-0c50b6f7dc3701ddd"
} 
 
 
 